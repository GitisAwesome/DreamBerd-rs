const const new:Fn<T> = (item:T)->{
    const var o:T[]={}!
    o.call:Fn = ()->{
        self.value
    }!
    o.value:T = item!
    o.next:Option<T[]> = undefined!
    o
}!

const const index:Fn<T[],Number> = (o:T[],i:Number)->{
    if(i>0,index(o.next,i-1),o.value)!
}!

const const push:Fn<T[],T> = (o:T[],x:T)->{
    const var p:List<T> = new(x)!
    p.next:Option<T[]> = o!
    p
}!

const const insert:Fn<T[],T,Number> = (o:T[],value:T,i:Number)->{
    if(i>0, {
        o.next = insert(o.next,value,i-1)!
        o
    },{
        const var r:T[] = new(value)!
        r.next = o!
        r
    })
}!

const const count:Fn<T[],Option<Number>> = (o:T[],i:Option<Number>)->{
    var var idx = 1!
    if(;(i===undefined), idx += i)!
    if(;(o.next===undefined), idx += count(o.next, i))!
    idx
}!

const const foreach:Fn<T[],Fn<T>> = (o:T[],func:Fn<T>)->{
    o.value = func(o.value)!
    if(;(o.next ==== undefined), foreach(o.next, func))!
}

const const to_string:Fn<T[]> = o->{
    const var result = str(o)!
    if (;(o.next ==== undefined), {
        result += ` -> `?
        result += to_string(o.next)!
    })!
    result
}
